generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id      String   @id @default(uuid())
  username     String   @unique
  password     String
  role         UserRole
  name         String
  lastname     String
  middlename   String?
  birthdate    DateTime?
  gender       Gender?
  address      String?
  payment      String?
  phone_number String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  attendances       Attendance[]
  group_members     GroupMembers[]
  gradedSubmissions Submissions[]  @relation("GraderSubmissions")
  submissions       Submissions[]  @relation("StudentSubmissions")
  assignments       Assignments[]  @relation("AssignmentsTeacher")
  student_payments  StudentPayment[] @relation("StudentPaymentUser")
}

model Groups {
  group_id      String         @id @default(uuid())
  name          String         @unique
  description   String
  course_id     String         
  course        Course         @relation(fields: [course_id], references: [course_id])
  status        GroupStatus    @default(ACTIVE)
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  group_members GroupMembers[]
  lessons       Lessons[]
  schedules     Schedule[]
  assignments   Assignments[]
  students      Student[]
}

model Assignments {
  assignment_id String        @id @default(uuid())
  title        String
  description  String
  due_date     DateTime
  lesson_id    String
  group_id     String
  teacher_id   String?
  lesson       Lessons       @relation(fields: [lesson_id], references: [lesson_id])
  group        Groups        @relation(fields: [group_id], references: [group_id])
  teacher      User?         @relation("AssignmentsTeacher", fields: [teacher_id], references: [user_id])
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  submissions  Submissions[]
}

model Lessons {
  lesson_id      String        @id @default(uuid())
  group_id       String
  topic          String
  lesson_date    DateTime
  recording_path String
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  assignments    Assignments[]
  attendance     Attendance[]
  group          Groups        @relation(fields: [group_id], references: [group_id])
}

model Attendance {
  attendance_id String   @id @default(uuid())
  lesson_id    String
  student_id   String
  status       AttendanceStatus
  remarks      String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  lesson       Lessons  @relation(fields: [lesson_id], references: [lesson_id])
  student      User     @relation(fields: [student_id], references: [user_id])
}

model Course {
  course_id   String       @id @default(uuid())
  name        String       @unique
  description String
  duration    Int
  status      CourseStatus @default(ACTIVE)
  created_at  DateTime     @default(now())
  updated_at  DateTime     @updatedAt
  groups      Groups[]
}

model Schedule {
  schedule_id  String   @id @default(uuid())
  group_id     String
  day_of_week  Int
  start_time   DateTime
  end_time     DateTime
  room         String?
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  group        Groups   @relation(fields: [group_id], references: [group_id])
}

model GroupMembers {
  group_members_id String   @id @default(uuid())
  group_id        String
  user_id         String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
  group           Groups   @relation(fields: [group_id], references: [group_id])
  user            User     @relation(fields: [user_id], references: [user_id])
}

model Submissions {
  submission_id  String      @id @default(uuid())
  assignment_id  String
  student_id     String
  graded_by      String?
  file_path      String?
  answer_text    String?
  grade          String?
  graded_at      DateTime?
  feedback       String?
  assignment     Assignments @relation(fields: [assignment_id], references: [assignment_id])
  graded         User?        @relation("GraderSubmissions", fields: [graded_by], references: [user_id])
  student        User        @relation("StudentSubmissions", fields: [student_id], references: [user_id])
}

model StudentPayment {
  id        String        @id @default(uuid())
  student_id String
  amount    Float
  type      PaymentType
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  student   User          @relation("StudentPaymentUser", fields: [student_id], references: [user_id])
}

model TeacherSalary {
  id        String        @id @default(uuid())
  amount    Float
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Student {
  user_id     String   @id @default(uuid())
  name        String
  lastname    String
  middlename  String?
  birthdate   DateTime?
  gender      Gender?
  address     String?
  payment     String?
  phone_number String?
  group_id    String?
  created_at  DateTime @default(now())
  group       Groups?  @relation(fields: [group_id], references: [group_id])
}

model Teacher {
  user_id    String   @id @default(uuid())
  full_name  String
  birthdate  DateTime
  gender     Gender
  contact    String?
  created_at DateTime @default(now())
}

model Setting {
  id        Int      @id @default(autoincrement())
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  ADMIN
  MANAGER
  TEACHER
  STUDENT
}

enum GroupStatus {
  ACTIVE
  INACTIVE
  COMPLETED
}

enum CourseStatus {
  ACTIVE
  INACTIVE
  DRAFT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum PaymentType {
  MONTHLY
  COURSE
  OTHER
}

enum Gender {
  MALE
  FEMALE
}